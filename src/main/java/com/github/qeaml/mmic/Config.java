package com.github.qeaml.mmic;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;

import com.terraformersmc.modmenu.api.ConfigScreenFactory;
import com.terraformersmc.modmenu.api.ModMenuApi;

import me.shedaniel.clothconfig2.api.ConfigBuilder;
import net.fabricmc.loader.api.FabricLoader;
import net.minecraft.client.MinecraftClient;
import net.minecraft.text.Text;
import net.minecraft.util.Identifier;

public class Config implements ModMenuApi {
	private static Properties props = new Properties();
	private static File source = new File(MinecraftClient.getInstance().runDirectory, "options.mmic.txt");

	// general
	public static int gridColor = 0xFF000000;
	public static double gammaStep = 0.2;
	public static boolean miniF3 = false;
	public static boolean staticHand = false;
	public static int pickupDisplayTime = 100;
	public static boolean pickupDisplayEnable = false;

	public enum LagType
	{
		BLOCK,
		CLOG,
		LOSSY_BLOCK,
		LOSSY_CLOG
	}
	public static LagType lagType = LagType.BLOCK;

	// zoom
	public static double zoomFovDiv = 5;
	public static double zoomSensDiv = 2;
	public static boolean zoomSmooth = false;

	public static void load() {
		if(!source.exists()) {
			try {
				source.getParentFile().mkdirs();
				source.createNewFile();
				save();
				return;
			} catch(IOException e) {
				Client.log.warn("Could not load config: "+e.getMessage());
			}
			return;
		}
		try(var fr = new FileInputStream(source)) {
			props.load(fr);
			gridColor = Integer.parseInt((String)props.getOrDefault("gridColor", "-16777216"));
			gammaStep = Double.parseDouble((String)props.getOrDefault("gammaStep", "0.2"));
			miniF3 = Boolean.parseBoolean((String)props.getOrDefault("miniF3", "false"));
			staticHand = Boolean.parseBoolean((String)props.getOrDefault("staticHand", "false"));
			pickupDisplayTime = Integer.parseInt((String)props.getOrDefault("pickupDisplayTime", "100"));
			pickupDisplayEnable = Boolean.parseBoolean((String)props.getOrDefault("pickupDisplayEnable", "false"));
			lagType = LagType.valueOf((String)props.getOrDefault("lagType", LagType.BLOCK.toString()));
			zoomFovDiv = Double.parseDouble((String)props.getOrDefault("zoomFovDiv", "5"));
			zoomSensDiv = Double.parseDouble((String)props.getOrDefault("zoomSensDiv", "2"));
			zoomSmooth = Boolean.parseBoolean((String)props.getOrDefault("zoomSmooth", "false"));
		} catch(IOException e) {
			Client.log.warn("Could not load config: "+e.getMessage());
		}
	}

	public static void save() {
		try(var fw = new FileOutputStream(source)) {
			props.setProperty("gridColor", Integer.toString(gridColor));
			props.setProperty("gammaStep", Double.toString(gammaStep));
			props.setProperty("miniF3", Boolean.toString(miniF3));
			props.setProperty("staticHand", Boolean.toString(staticHand));
			props.setProperty("pickupDisplayTime", Integer.toString(pickupDisplayTime));
			props.setProperty("pickupDisplayEnable", Boolean.toString(pickupDisplayEnable));
			props.setProperty("lagType", lagType.toString());
			props.setProperty("zoomFovDiv", Double.toString(zoomFovDiv));
			props.setProperty("zoomSensDiv", Double.toString(zoomSensDiv));
			props.setProperty("zoomSmooth", Boolean.toString(zoomSmooth));
			props.store(fw, "  File generated by MMIC; please don't edit manually");
		} catch(IOException e) {
			Client.log.warn("Could not save config: "+e.getMessage());
		}
	}

	public ConfigScreenFactory<?> getModConfigScreenFactory() {
		if(!FabricLoader.getInstance().isModLoaded("cloth-config2"))
			return parent -> null;
		return parent -> {
			var builder = ConfigBuilder.create()
				.setParentScreen(parent)
				.setTitle(Text.translatable("config.mmic.title"))
				.setDefaultBackgroundTexture(new Identifier("minecraft", "textures/block/lapis_block.png"));
			var entry = builder.entryBuilder();
			var general = builder.getOrCreateCategory(Text.translatable("config.mmic.general"));

			general.addEntry(entry.startAlphaColorField(
				Text.translatable("config.mmic.gridColor"),
				gridColor)
				.setDefaultValue(0xFF000000)
				.setTooltip(Text.translatable("config.mmic.gridColor.tip"))
				.setSaveConsumer(i -> gridColor = i)
				.build());
			general.addEntry(entry.startDoubleField(
				Text.translatable("config.mmic.gammaStep"),
				gammaStep * 100)
				.setDefaultValue(20)
				.setTooltip(Text.translatable("config.mmic.gammaStep.tip"))
				.setSaveConsumer(d -> gammaStep = d / 100)
				.build());
			general.addEntry(entry.startBooleanToggle(
				Text.translatable("config.mmic.miniF3"),
				miniF3)
				.setDefaultValue(false)
				.setTooltip(Text.translatable("config.mmic.miniF3.tip"))
				.setSaveConsumer(b -> miniF3 = b)
				.build());
			general.addEntry(entry.startBooleanToggle(
				Text.translatable("config.mmic.staticHand"),
				staticHand)
				.setDefaultValue(false)
				.setTooltip(Text.translatable("config.mmic.staticHand.tip"))
				.setSaveConsumer(b -> staticHand = b)
				.build());
			// general.addEntry(entry.startDoubleField(
			// 	Text.translatable("config.mmic.pickupDisplayTime"),
			// 	pickupDisplayTime/20)
			// 	.setDefaultValue(5)
			// 	.setTooltip(Text.translatable("config.mmic.pickupDisplayTime.tip"))
			// 	.setSaveConsumer(d -> pickupDisplayTime = (int)d.doubleValue()*20)
			// 	.build());
			// general.addEntry(entry.startBooleanToggle(
			// 	Text.translatable("config.mmic.pickupDisplayEnable"),
			// 	pickupDisplayEnable)
			// 	.setDefaultValue(false)
			// 	.setTooltip(Text.translatable("config.mmic.pickupDisplayEnable"))
			// 	.setSaveConsumer(b -> pickupDisplayEnable = b)
			// 	.build());
			general.addEntry(entry.startEnumSelector(
				Text.translatable("config.mmic.lagType"),
				LagType.class,
				lagType)
				.setDefaultValue(LagType.BLOCK)
				.setTooltip(Text.translatable("config.mmic.lagType.tip"))
				.setSaveConsumer(l -> lagType = l)
				.build());

			var zoom = builder.getOrCreateCategory(Text.translatable("config.mmic.zoom"));

			zoom.addEntry(entry.startDoubleField(
				Text.translatable("config.mmic.zoomFovDiv"),
				zoomFovDiv)
				.setDefaultValue(5)
				.setTooltip(Text.translatable("config.mmic.zoomFovDiv.tip"))
				.setSaveConsumer(d -> zoomFovDiv = d)
				.setMin(1.0)
				.setMax(10.0)
				.build());
			zoom.addEntry(entry.startDoubleField(
				Text.translatable("config.mmic.zoomSensDiv"),
				zoomSensDiv)
				.setDefaultValue(2)
				.setTooltip(Text.translatable("config.mmic.zoomSensDiv.tip"))
				.setSaveConsumer(d -> zoomSensDiv = d)
				.setMin(1.0)
				.setMax(10.0)
				.build());
			zoom.addEntry(entry.startBooleanToggle(
				Text.translatable("config.mmic.zoomSmooth"),
				zoomSmooth)
				.setDefaultValue(false)
				.setTooltip(Text.translatable("config.mmic.zoomSmooth.tip"))
				.setSaveConsumer(b -> zoomSmooth = b)
				.build());

			builder.setSavingRunnable(Config::save);

			return builder.build();
		};
	}
}
